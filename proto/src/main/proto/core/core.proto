syntax = "proto3";

// 用于描述整个体系中基础、共用的数据结构。
// 原则1：网络通讯设计的各类用语，以客户端为中心。

package core;

//set the package name of the class
option java_package = "com.windchat.proto.core";
option java_outer_classname = "CoreProto";

// options for php
//// option php_namespace = "Akaxin\\Proto\\Core";

// 错误信息
//code="success" 请求成功
//code="error" 请求失败，客户端不做任何处理
//code="error.alter" 请求失败，客户端展示错误info
//code="error.session" api请求||im请求校验session失败
//code="error.login.need_register" 用户登陆返回此值需要告诉用户注册
//code="error.login.needRegister" 用户登陆返回此值需要告诉用户注册
//code="error.phone.same" 用户绑定身份，表示二者已经存在绑定
message ErrorInfo {
    string code = 1;
    string info = 2;
}

// 代表无响应，用户编写rpc service时，因为protobuf要求idl文件中必须包含一个返回值
message NoneResponse {

}

// 数据包中的数据部分
message TransportPackageData {

    //错误信息，如果err不为null，data很有可能是无用的。
    ErrorInfo err = 1;

    //业务Data，由业务逻辑自己解析
    bytes data = 2;

    //非业务逻辑的必要数据
    // 分为两个级别：Socket级 与 Request级
    // Socket级：只在链接建立后的第一个请求中传递，在链接的整个生命周期都有效。
    // Request级：在每一次请求中都可能会变化并传递。
    map<int32, string> header = 3;
}

enum HeaderKey {
    //0-500 分配给CLIENT_SOCKET
    CLIENT_SOCKET_VERSION = 0;    //0.3.2
    CLIENT_SOCKET_SITE_SESSION_ID = 1;
    CLIENT_SOCKET_PLATFORM_SESSION_ID = 2;
    CLIENT_SOCKET_DEVICE_ID = 3;
    CLIENT_SOCKET_LANGUAGE = 4; //客户端正在使用的语言, cn/en
    CLIENT_SOCKET_TYPE = 5; //客户端类型，见client.proto中的ClientType

    //501-1000 分配给CLIENT_REQUEST
    CLIENT_REQUEST_REFERER = 501;
    CLIENT_REQUEST_SERVER_HOST = 502;    //客户端访问的服务host
    CLIENT_REQUEST_SERVER_PORT = 503;    //客户端访问的服务port

    //1001-2000 分配给SITE_SERVER
    SITE_SERVER_VERSION = 1001;    //服务端地址
    SITE_SERVER_HOST = 1002;        //服务端host
    SITE_SERVER_PORT = 1003;        //服务端port

    //2001-3000 分配给PLATFORM

    //3001-4000 分配给PLUGIN
    PLUGIN_CLIENT_REFERER = 3001; //plugin referer
}

//以下内容为共用消息内容
//消息类型
enum MsgType  {
  NOTICE = 0; //系统通知
  MSG_STATUS = 1;//每条发送的消息，发送一个消息状态的回执

//  MSG_FINISH = 2; //暂时取消使用，废除字段

  TEXT = 3; //二人文本消息
  SECRET_TEXT = 4; //加密二人文本消息
  GROUP_TEXT = 5; //群聊文本消息
  GROUP_SECRET_TEXT = 6;//群聊加密文本消息(暂未使用)

  IMAGE = 7; //二人图片消息
  SECRET_IMAGE = 8; //二人加密图片消息
  GROUP_IMAGE = 9; //群图片消息
  GROUP_SECRET_IMAGE = 10;//群加密图片(暂未使用)

  VOICE = 11; //二人语音消息
  SECRET_VOICE = 12; //二人加密语音
  GROUP_VOICE = 13; //群语音
  GROUP_SECRET_VOICE = 14;//群加密语音(暂未使用)

  U2_MAP = 15; //二人地图
  U2_SECRET_MAP = 16; //二人加密地图消息
  GROUP_MAP = 17; //群地图
  GROUP_SECRET_MAP = 18;//群加密地图消息

  U2_NOTICE = 19; //二人：消息中的通知消息
  GROUP_NOTICE = 20; //群：消息中的通知消息

  U2_RECALL = 21; //二人撤回消息
  GROUP_RECALL = 22;//群撤回消息

  U2_WEB = 23; //二人：消息中的WEB内嵌消息
  GROUP_WEB = 24; //群：消息中的WEB内嵌消息

  U2_WEB_NOTICE = 25; //二人：内嵌WEB通知消息
  GROUP_WEB_NOTICE = 26; //群：内嵌WEB通知消息

}

/**
 * msg_status:1 发送成功
 * msg_status:0 默认状态
 * msg_status:-1 用户非好友关系，二人消息发送失败
 * msg_status:-2 用户非群成员，群消息发送失败
 */
message MsgStatus {
    string msg_id = 1;
    int32 msg_status = 2;

    // msg_server_time 等于此条消息在服务器数据库的值
    //
    // 如果是发送成功的状态，此值有效。
    // 为什么不使用服务器下发这条请求时的即时时间？
    // 这样的话，可以脱离状态，随意的重发来保证成功。
    //
    // @since v2
    // @todo 补充v2之前版本对此字段的处理逻辑（默认使用msg_time_send的值）
    int64 msg_server_time = 3;

    // @since v6
    int32 msg_pointer = 4; //当前消息的游标
}

//作废，但是不能删除，protobuf自带需要自增的问题
//message MsgFinish {
//}

//普通文本消息
message MsgText{
    string msg_id = 1; //消息id
    string site_user_id = 2;
    string site_friend_id = 3;
    bytes text = 4;
    int64 time = 5; //消息时间，单位ms
}

//加密文本消息
message MsgSecretText{
    string msg_id          = 1;
    string site_user_id    = 2;
    string site_friend_id  = 3;

    bytes text             = 4;
    string base64_ts_key   = 5; //加密key,base64
    string to_device_id    = 6;

    int64 time = 7; //消息时间，单位ms
}

//普通文本消息
message GroupText{
    string msg_id          = 1;    //消息id
    string site_user_id    = 2;
    string site_group_id   = 3;

    bytes text = 4;
    int64 time = 5; //消息时间，单位ms

    string at_site_user_id = 6; //@who 群消息可以@他人
}

//加密文本消息
message GroupSecretText{
    string msg_id          = 1;
    string site_user_id    = 2;
    string site_group_id   = 3;

    bytes text = 4;
    string base64_ts_key   = 5; //加密key，值为aes密钥（原始bytes base64encode后的字符串）
    string to_device_id    = 6;

    int64 time = 7; //消息时间，单位ms
}

//普通图片消息
message MsgImage{
    string msg_id = 1;
    string site_user_id = 2;
    string site_friend_id = 3;
    string imageId = 4;
    int64 time = 7; //消息时间，单位ms
}

//加密图片消息
message MsgSecretImage{
    string msg_id = 1;
    string site_user_id = 2;
    string site_friend_id = 3;
    string imageId = 4;
    string base64_ts_key = 5; //加密key，值为aes密钥（原始bytes base64encode后的字符串）
    string to_device_id = 6;
    int64 time = 7; //消息时间，单位ms
}


//群普通图片消息
message GroupImage{
    string msg_id = 1;
    string site_user_id = 2;
    string site_group_id = 3;
    string imageId = 4;
    int64 time = 7; //消息时间，单位ms
}

//群加密图片消息
message GroupSecretImage{
    string msg_id = 1;
    string site_user_id = 2;
    string site_group_id = 3;
    string imageId = 4;
    string base64_ts_key = 5; //加密key，值为aes密钥（原始bytes base64encode后的字符串）
    string to_device_id = 6;
    int64 time = 7; //消息时间，单位ms
}

//普通语音消息
message MsgVoice{
    string msg_id = 1;
    string site_user_id = 2;
    string site_friend_id = 3;
    string voiceId = 4;    //语音地址ID
    int64 time = 7; //消息时间，单位ms
}

//加密语音消息
message MsgSecretVoice{
    string msg_id = 1;
    string site_user_id = 2;
    string site_friend_id = 3;
    string voiceId = 4;
    string base64_ts_key = 5; //加密key，值为aes密钥（原始bytes base64encode后的字符串）
    string to_device_id = 6;
    int64 time = 7; //消息时间，单位ms
}

//群语音消息
message GroupVoice{
    string msg_id = 1;
    string site_user_id = 2;
    string site_group_id = 3;
    string voiceId = 4;    //语音地址ID
    int64 time = 7; //消息时间，单位ms
}

//群语音加密消息
message GroupSecretVoice {
    string msg_id = 1;
    string site_user_id = 2;
    string site_group_id = 3;
    string voiceId = 4;
    string base64_ts_key = 5; //加密key，值为aes密钥（原始bytes base64encode后的字符串）
    string to_device_id = 6; //接受者的设备ID
    int64 time = 7; //消息时间，单位ms
}

//普通地理位置消息
message U2Map {
    string msg_id = 1; //消息id
    string site_user_id = 2; //from
    string site_friend_id = 3; //to
    string lng = 4; //经度
    string lat = 5; //纬度
    int64 time = 6; //消息时间，单位ms
}

//加密地理位置消息
message U2SecretMap {
    string msg_id = 1; //消息id
    string site_user_id = 2; //from
    string site_friend_id = 3; //to
    string base64_lng = 4; //加密Base64经度
    string base64_lat = 5; //加密Base64纬度
    string base64_ts_key = 6; //Base64的加密key，用于AES加密使用
    string to_device_id = 7; //接受者的设备ID
    int64 time = 8; //消息时间，单位ms
}

//普通群地理位置消息
message GroupMap{
    string msg_id = 1; //消息id
    string site_user_id = 2; //from
    string site_group_id = 3; //to（群id）
    string lng = 4; //经度
    string lat = 5; //纬度
    int64 time = 6; //消息时间，单位ms
}

//加密群地理位置消息
message GroupSecretMap{
    string msg_id = 1; //消息id
    string site_user_id = 2; //from
    string site_group_id = 3; //to（群ID）
    string base64_lng = 4; //加密经度
    string base64_lat = 5; //加密纬度
    string base64_ts_key = 6; //base64的加密key，用于AES加密使用
    string to_device_id = 7; //接受者的设备ID
    int64 time = 8; //消息时间，单位ms
}

//消息通知：二人消息文本通知消息
message U2MsgNotice{
    string site_user_id = 1;    //通知可能的发送方
    string site_friend_id = 2;  //消息的接收方
    bytes text = 3; //消息通知内容
    int64 time = 4; //消息时间，单位ms
    string msg_id = 5; //通知消息id
}

//消息通知：群组消息文本通知消息
message GroupMsgNotice{
    string site_user_id = 1;    //通知发送者
    string site_group_id = 2;   //群组ID
    bytes text = 3; //通知消息
    int64 time = 4; //消息时间，单位ms
    string msg_id = 5; //通知消息id
}

//撤回的消息，不用入库
message U2Recall {
    string msg_id = 1; //撤回消息的ID
    string site_user_id = 2;
    string site_friend_id = 3;
    string recall_msg_id = 4; //撤回的消息ID
    int64 time = 5; //消息时间，单位ms,（撤回消息客户端需要判断是否超过2minutes）
}

//撤回的消息，不用入库
message GroupRecall {
    string msg_id = 1; //撤回消息的ID
    string site_user_id = 2;
    string site_group_id = 3;
    string recall_msg_id = 4; //撤回的消息ID
    int64 time = 5; //消息时间，单位ms,（撤回消息客户端需要判断是否超过2minutes）
}

//二人：内嵌web类型消息
message U2Web {
    string msg_id = 1; //消息ID
    string site_user_id = 2; //from
    string site_friend_id = 3; //to
    string web_code = 4; //统一使用web消息需要的代码内容
    int32 width = 5; //web消息的宽度
    int32 height = 6; //web消息的高度
    int64 time = 7; //消息时间

    string href_url = 8; //跳转链接；如果为空则不跳转。
}

//群组：内嵌web类型消息
message GroupWeb {
    string msg_id = 1; //消息ID
    string site_user_id = 2; //from
    string site_group_id = 3; //群ID(to)
    string web_code = 4; //统一使用web消息需要的代码内容
    int32 width = 5; //web消息的宽度
    int32 height = 6; //web消息的高度
    int64 time = 7; //消息时间

    string href_url = 8; //跳转链接；如果为空则不跳转。
}

//二人WEB通知：内嵌web通知消息
message U2WebNotice {
    string msg_id = 1; //消息ID
    string site_user_id = 2; //from
    string site_friend_id = 3; //to
    string web_code = 4; //统一使用web消息需要的代码内容
    int64 time = 5; //消息时间

    string href_url = 6; //跳转链接；如果为空则不跳转。
    int32 height = 7; //web notice消息的高度
}

//群组WEB通知：内嵌web通知消息
message GroupWebNotice{
    string msg_id = 1; //消息ID
    string site_user_id = 2; //from
    string site_group_id = 3; //群ID(to)
    string web_code = 4; //统一使用web消息需要的代码内容
    int64 time = 5; //消息时间

    string href_url = 6; //跳转链接；如果为空则不跳转。
    int32 height = 7; //web notice消息的高度
}
