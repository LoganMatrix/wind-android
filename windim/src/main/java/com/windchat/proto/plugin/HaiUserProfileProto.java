// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin/hai_user_profile.proto

package com.windchat.proto.plugin;

public final class HaiUserProfileProto {
  private HaiUserProfileProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface HaiUserProfileRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:plugin.HaiUserProfileRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *需要查找的用户ID
     * </pre>
     *
     * <code>optional string site_user_id = 1;</code>
     */
    String getSiteUserId();
    /**
     * <pre>
     *需要查找的用户ID
     * </pre>
     *
     * <code>optional string site_user_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getSiteUserIdBytes();
  }
  /**
   * <pre>
   **
   *获取用户资料
   *----
   *接口名
   *----
   * /hai/user/profile
   *错误码
   *----
   *- success
   *- error.alert
   * </pre>
   *
   * Protobuf type {@code plugin.HaiUserProfileRequest}
   */
  public  static final class HaiUserProfileRequest extends
      com.google.protobuf.GeneratedMessageLite<
          HaiUserProfileRequest, HaiUserProfileRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:plugin.HaiUserProfileRequest)
      HaiUserProfileRequestOrBuilder {
    private HaiUserProfileRequest() {
      siteUserId_ = "";
    }
    public static final int SITE_USER_ID_FIELD_NUMBER = 1;
    private String siteUserId_;
    /**
     * <pre>
     *需要查找的用户ID
     * </pre>
     *
     * <code>optional string site_user_id = 1;</code>
     */
    public String getSiteUserId() {
      return siteUserId_;
    }
    /**
     * <pre>
     *需要查找的用户ID
     * </pre>
     *
     * <code>optional string site_user_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSiteUserIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(siteUserId_);
    }
    /**
     * <pre>
     *需要查找的用户ID
     * </pre>
     *
     * <code>optional string site_user_id = 1;</code>
     */
    private void setSiteUserId(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      siteUserId_ = value;
    }
    /**
     * <pre>
     *需要查找的用户ID
     * </pre>
     *
     * <code>optional string site_user_id = 1;</code>
     */
    private void clearSiteUserId() {

      siteUserId_ = getDefaultInstance().getSiteUserId();
    }
    /**
     * <pre>
     *需要查找的用户ID
     * </pre>
     *
     * <code>optional string site_user_id = 1;</code>
     */
    private void setSiteUserIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      siteUserId_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!siteUserId_.isEmpty()) {
        output.writeString(1, getSiteUserId());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!siteUserId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getSiteUserId());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static HaiUserProfileRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static HaiUserProfileRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static HaiUserProfileRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static HaiUserProfileRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static HaiUserProfileRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static HaiUserProfileRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static HaiUserProfileRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static HaiUserProfileRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static HaiUserProfileRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static HaiUserProfileRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(HaiUserProfileRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     **
     *获取用户资料
     *----
     *接口名
     *----
     * /hai/user/profile
     *错误码
     *----
     *- success
     *- error.alert
     * </pre>
     *
     * Protobuf type {@code plugin.HaiUserProfileRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          HaiUserProfileRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:plugin.HaiUserProfileRequest)
        HaiUserProfileRequestOrBuilder {
      // Construct using com.windchat.proto.plugin.HaiUserProfileProto.HaiUserProfileRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *需要查找的用户ID
       * </pre>
       *
       * <code>optional string site_user_id = 1;</code>
       */
      public String getSiteUserId() {
        return instance.getSiteUserId();
      }
      /**
       * <pre>
       *需要查找的用户ID
       * </pre>
       *
       * <code>optional string site_user_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSiteUserIdBytes() {
        return instance.getSiteUserIdBytes();
      }
      /**
       * <pre>
       *需要查找的用户ID
       * </pre>
       *
       * <code>optional string site_user_id = 1;</code>
       */
      public Builder setSiteUserId(
          String value) {
        copyOnWrite();
        instance.setSiteUserId(value);
        return this;
      }
      /**
       * <pre>
       *需要查找的用户ID
       * </pre>
       *
       * <code>optional string site_user_id = 1;</code>
       */
      public Builder clearSiteUserId() {
        copyOnWrite();
        instance.clearSiteUserId();
        return this;
      }
      /**
       * <pre>
       *需要查找的用户ID
       * </pre>
       *
       * <code>optional string site_user_id = 1;</code>
       */
      public Builder setSiteUserIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSiteUserIdBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:plugin.HaiUserProfileRequest)
    }
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new HaiUserProfileRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          HaiUserProfileRequest other = (HaiUserProfileRequest) arg1;
          siteUserId_ = visitor.visitString(!siteUserId_.isEmpty(), siteUserId_,
              !other.siteUserId_.isEmpty(), other.siteUserId_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  siteUserId_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (HaiUserProfileRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:plugin.HaiUserProfileRequest)
    private static final HaiUserProfileRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new HaiUserProfileRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static HaiUserProfileRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<HaiUserProfileRequest> PARSER;

    public static com.google.protobuf.Parser<HaiUserProfileRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface HaiUserProfileResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:plugin.HaiUserProfileResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *需要查找的用户
     * </pre>
     *
     * <code>optional .core.UserProfile user_profile = 1;</code>
     */
    boolean hasUserProfile();
    /**
     * <pre>
     *需要查找的用户
     * </pre>
     *
     * <code>optional .core.UserProfile user_profile = 1;</code>
     */
    com.windchat.proto.core.UserProto.UserProfile getUserProfile();
  }
  /**
   * Protobuf type {@code plugin.HaiUserProfileResponse}
   */
  public  static final class HaiUserProfileResponse extends
      com.google.protobuf.GeneratedMessageLite<
          HaiUserProfileResponse, HaiUserProfileResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:plugin.HaiUserProfileResponse)
      HaiUserProfileResponseOrBuilder {
    private HaiUserProfileResponse() {
    }
    public static final int USER_PROFILE_FIELD_NUMBER = 1;
    private com.windchat.proto.core.UserProto.UserProfile userProfile_;
    /**
     * <pre>
     *需要查找的用户
     * </pre>
     *
     * <code>optional .core.UserProfile user_profile = 1;</code>
     */
    public boolean hasUserProfile() {
      return userProfile_ != null;
    }
    /**
     * <pre>
     *需要查找的用户
     * </pre>
     *
     * <code>optional .core.UserProfile user_profile = 1;</code>
     */
    public com.windchat.proto.core.UserProto.UserProfile getUserProfile() {
      return userProfile_ == null ? com.windchat.proto.core.UserProto.UserProfile.getDefaultInstance() : userProfile_;
    }
    /**
     * <pre>
     *需要查找的用户
     * </pre>
     *
     * <code>optional .core.UserProfile user_profile = 1;</code>
     */
    private void setUserProfile(com.windchat.proto.core.UserProto.UserProfile value) {
      if (value == null) {
        throw new NullPointerException();
      }
      userProfile_ = value;

      }
    /**
     * <pre>
     *需要查找的用户
     * </pre>
     *
     * <code>optional .core.UserProfile user_profile = 1;</code>
     */
    private void setUserProfile(
        com.windchat.proto.core.UserProto.UserProfile.Builder builderForValue) {
      userProfile_ = builderForValue.build();

    }
    /**
     * <pre>
     *需要查找的用户
     * </pre>
     *
     * <code>optional .core.UserProfile user_profile = 1;</code>
     */
    private void mergeUserProfile(com.windchat.proto.core.UserProto.UserProfile value) {
      if (userProfile_ != null &&
          userProfile_ != com.windchat.proto.core.UserProto.UserProfile.getDefaultInstance()) {
        userProfile_ =
          com.windchat.proto.core.UserProto.UserProfile.newBuilder(userProfile_).mergeFrom(value).buildPartial();
      } else {
        userProfile_ = value;
      }

    }
    /**
     * <pre>
     *需要查找的用户
     * </pre>
     *
     * <code>optional .core.UserProfile user_profile = 1;</code>
     */
    private void clearUserProfile() {  userProfile_ = null;

    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (userProfile_ != null) {
        output.writeMessage(1, getUserProfile());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (userProfile_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getUserProfile());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static HaiUserProfileResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static HaiUserProfileResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static HaiUserProfileResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static HaiUserProfileResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static HaiUserProfileResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static HaiUserProfileResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static HaiUserProfileResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static HaiUserProfileResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static HaiUserProfileResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static HaiUserProfileResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(HaiUserProfileResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code plugin.HaiUserProfileResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          HaiUserProfileResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:plugin.HaiUserProfileResponse)
        HaiUserProfileResponseOrBuilder {
      // Construct using com.windchat.proto.plugin.HaiUserProfileProto.HaiUserProfileResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *需要查找的用户
       * </pre>
       *
       * <code>optional .core.UserProfile user_profile = 1;</code>
       */
      public boolean hasUserProfile() {
        return instance.hasUserProfile();
      }
      /**
       * <pre>
       *需要查找的用户
       * </pre>
       *
       * <code>optional .core.UserProfile user_profile = 1;</code>
       */
      public com.windchat.proto.core.UserProto.UserProfile getUserProfile() {
        return instance.getUserProfile();
      }
      /**
       * <pre>
       *需要查找的用户
       * </pre>
       *
       * <code>optional .core.UserProfile user_profile = 1;</code>
       */
      public Builder setUserProfile(com.windchat.proto.core.UserProto.UserProfile value) {
        copyOnWrite();
        instance.setUserProfile(value);
        return this;
        }
      /**
       * <pre>
       *需要查找的用户
       * </pre>
       *
       * <code>optional .core.UserProfile user_profile = 1;</code>
       */
      public Builder setUserProfile(
          com.windchat.proto.core.UserProto.UserProfile.Builder builderForValue) {
        copyOnWrite();
        instance.setUserProfile(builderForValue);
        return this;
      }
      /**
       * <pre>
       *需要查找的用户
       * </pre>
       *
       * <code>optional .core.UserProfile user_profile = 1;</code>
       */
      public Builder mergeUserProfile(com.windchat.proto.core.UserProto.UserProfile value) {
        copyOnWrite();
        instance.mergeUserProfile(value);
        return this;
      }
      /**
       * <pre>
       *需要查找的用户
       * </pre>
       *
       * <code>optional .core.UserProfile user_profile = 1;</code>
       */
      public Builder clearUserProfile() {  copyOnWrite();
        instance.clearUserProfile();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:plugin.HaiUserProfileResponse)
    }
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new HaiUserProfileResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          HaiUserProfileResponse other = (HaiUserProfileResponse) arg1;
          userProfile_ = visitor.visitMessage(userProfile_, other.userProfile_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.windchat.proto.core.UserProto.UserProfile.Builder subBuilder = null;
                  if (userProfile_ != null) {
                    subBuilder = userProfile_.toBuilder();
                  }
                  userProfile_ = input.readMessage(com.windchat.proto.core.UserProto.UserProfile.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(userProfile_);
                    userProfile_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (HaiUserProfileResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:plugin.HaiUserProfileResponse)
    private static final HaiUserProfileResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new HaiUserProfileResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static HaiUserProfileResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<HaiUserProfileResponse> PARSER;

    public static com.google.protobuf.Parser<HaiUserProfileResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
